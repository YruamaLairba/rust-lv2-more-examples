# LV2 plugins are installed in a `bundle`, a directory with a standard structure. Each bundle has a
# Turtle file named `manifest.ttl` which lists the contents of the bundle.
#
# Hosts typically read the manifest of every installed bundle to discover plugins on start-up, so it
# should be as small as possible for performance reasons. Details that are only useful if the host
# chooses to load the plugin are stored in other files and linked to from `manifest.ttl`.
#
# In a crate, this should be a special folder that contains the Turtle files. After the crate was
# build, the resulting shared object should also be copied into this folder.
# 
# ==== URIs ====
#
# LV2 makes use of URIs as globally-unique identifiers for resources. For example, the ID of the
# plugin described here is `<urn:rust-lv2-more-examples:eg-worker-rs>`. Note that URIs are only used as identifiers
# and don't necessarily imply that something can be accessed at that address on the web (though that
# may be the case).
# 
# ==== Namespace Prefixes ====
#
# Turtle files contain many URIs, but prefixes can be defined to improve readability. For example,
# with the `lv2:` prefix below, `lv2:Plugin` can be written instead of 
# `<http://lv2plug.in/ns/lv2core#Plugin>`.

@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

# ==== Describing a Plugin ====
#
# Turtle files contain a set of statements which describe resources. This file contains 3 statements:
#
# | Subject                      | Predicate      | Object       |
# |------------------------------|----------------|--------------|
# | `<urn:rust-lv2-more-examples:eg-worker-rs>` | `a `           | `lv2:Plugin` |
# | `<urn:rust-lv2-more-examples:eg-worker-rs>` | `lv2:binary`   | `<worker.so>`   |
# | `<urn:rust-lv2-more-examples:eg-worker-rs>` | `rdfs:seeAlso` | `<worker.ttl> ` |
# 

# Firstly, `<urn:rust-lv2-more-examples:eg-worker-rs>` is an LV2 plugin:
# The predicate `a` is a Turtle shorthand for `rdf:type`.
<urn:rust-lv2-more-examples:eg-worker-rs> a lv2:Plugin .

# The binary of that plugin can be found at `<worker.ext>`:
# This line is platform-dependet since it assumes that shared objects have the `.so` ending. For
# example on Windows, this line should look like this:
#
#     <urn:rust-lv2-more-examples:eg-worker-rs> lv2:binary <worker.dll> .

# Relative URIs in manifests are relative to the bundle directory, so this refers to a binary with
# the given name in the same directory as this manifest.
<urn:rust-lv2-more-examples:eg-worker-rs> lv2:binary <libworker.so> .

# Finally, more information about this plugin can be found in `<worker.ttl>`:
<urn:rust-lv2-more-examples:eg-worker-rs> rdfs:seeAlso <worker.ttl> .
